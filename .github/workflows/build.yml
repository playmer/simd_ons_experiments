name: build

on:
  push:
    branches: [ "master", "ci", "main" ]
  pull_request:
    branches: [ "master", "ci", "main" ]

jobs:
  linux:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            cc: gcc
          - os: ubuntu-latest
            cc: clang
    
    name: linux-${{ matrix.cc }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
        
      - uses: lukka/get-cmake@latest

      - name: install dependencies (Linux)
        run: |
          sudo add-apt-repository -y "deb http://archive.ubuntu.com/ubuntu `lsb_release -sc` main universe"
          sudo apt-get update -y -qq
          sudo apt-get install libasound2-dev libpulse-dev libwebp-dev libxrandr-dev tar

      - name: build
        run: |
          cmake --preset=ninja -B build
          cmake --build build --config Release
        
  windows-mingw:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            sys: mingw64
            env: x86_64
            arch: x86-64
            cc: gcc
          - os: windows-latest
            sys: mingw32
            env: i686
            arch: i686
            cc: gcc
    name: windows-cmake-${{matrix.env}}
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - uses: msys2/setup-msys2@v2
      with:
        msystem: ${{matrix.sys}}
        update: true
        install: 
          mingw-w64-${{matrix.env}}-toolchain
          cmake
          ninja

    - shell: msys2 {0}
      name: Build and Test
      run: |
        cmake --preset=ninja -B build
        cmake --build build --config Release

  windows-msvc:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            arch: amd64
          - os: windows-latest
            arch: x86         
          - os: windows-latest
            arch: arm64
          - os: windows-latest
            arch: arm
    
    name: windows-msvc-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - uses: lukka/get-cmake@latest

      - name: Build
        shell: cmd
        run: |
          "%ProgramFiles%\Microsoft Visual Studio\2022\Community\Common7\Tools\VsDevCmd.bat" -arch=${{ matrix.arch }} -host_arch=amd64
          cmake --preset=ninja -B build
          cmake --build build --config Release

  PSP:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            cc: gcc
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - uses: lukka/get-cmake@latest

      - name: install dependencies (PSP)
        run: |
          sudo add-apt-repository -y "deb http://archive.ubuntu.com/ubuntu `lsb_release -sc` main universe"
          sudo apt-get update -y -qq
          sudo apt-get install build-essential cmake pkgconf libreadline8 libusb-0.1 libgpgme11 libarchive-tools fakeroot curl zip
      - name: Download and install PSPDEV SDK
        env:
          CC: ${{ matrix.cc }}
        run: |
          curl -OL https://github.com/pspdev/pspdev/releases/latest/download/pspdev-ubuntu-latest-x86_64.tar.gz
          tar -xvf pspdev-ubuntu-latest-x86_64.tar.gz
      - name: Build
        run: |
          export PSPDEV="$PWD/pspdev"
          export PATH="$PATH:$PSPDEV/bin"
          
          cmake --preset=ninja -DCMAKE_TOOLCHAIN_FILE=${PSPDEV}/psp/share/pspdev.cmake -B build
          cmake --build build --config Release

          
  Xbox:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            cc: gcc
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - uses: lukka/get-cmake@latest

      - name: install dependencies (PSP)
        run: |
          sudo add-apt-repository -y "deb http://archive.ubuntu.com/ubuntu `lsb_release -sc` main universe"
          sudo apt-get update -y -qq
          sudo apt-get install build-essential flex bison clang lld git llvm
          
      - name: Download and install NXDK SDK
        env:
          CC: ${{ matrix.cc }}
        run: |
          git clone --depth 1 --recurse-submodules --shallow-submodules https://github.com/XboxDev/nxdk.git
          cd nxdk
          bin/activate
          make NXDK_ONLY=y
          make tools

      - name: Build
        run: |
          $PWD/nxdk/bin/activate
          
          cmake --preset=ninja -DCMAKE_TOOLCHAIN_FILE=$NXDK_DIR/share/toolchain-nxdk.cmake -B build
          cmake --build build --config Release